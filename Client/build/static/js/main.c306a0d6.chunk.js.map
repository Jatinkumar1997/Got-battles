{"version":3,"sources":["components/header.js","components/footer.js","components/battledetails.js","components/filterBattles.js","components/battleCount.js","App.js","serviceWorker.js","index.js"],"names":["header","className","footer","battledetails","prevprops","battless","length","this","props","render","obj","map","x","key","_id","name","location","battle_type","attacker_outcome","attacker_king","defender_king","note","React","Component","filterBattles","sendStates","e","preventDefault","onSubmit","state","king","type","value","id","onChange","setState","target","htmlFor","onClick","battleCount","battlesCount","App","submitHandler","searchParams","query","trim","axios","get","params","then","res","battles","data","catch","err","console","error","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c306a0d6.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function header() {\n    return (\n        <div className=\"card-panel teal lighten-2\">\n            <h1>Game Of Thrones - Battlegroud</h1>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function footer() {\n    return (\n        <footer className=\"page-footer\">\n            Developed By Jatin Kumar\n        </footer>\n    )\n}\n","import React from 'react'\nimport '../App.css'\n\nexport default class battledetails extends React.Component{\n    componentDidUpdate(prevprops){\n        if(prevprops.battless.length!==this.props.battless){\n            this.render()\n        }\n    }\n    render() {\n        const obj = this.props.battless.map((x)=>{\n        return(    \n            <div key={x._id} className=\"row\">\n                <div className=\"col s12 m12\">\n                <table className=\"centered\">\n                <thead>\n                    <tr>\n                <th>Name: {x.name}</th>\n                <th>Location: {x.location}</th>\n                <th>Battle Type: {x.battle_type}</th>\n                </tr>\n                </thead>\n\n                </table>\n                </div>\n                <div className=\"col s12 m6\" >\n                    <div className={\"card \"+ (x.attacker_outcome==='win'?'green':'red') +\" darken-0\"}>\n                        <div className=\"card-content white-text\">\n                            <span className=\"card-title\">{x.attacker_king}</span>\n                        </div>\n                    </div>\n                </div>\n                <div className={\"col s12 m6\"}>\n                    <div className={\"card \"+ (x.attacker_outcome==='loss'?'green':'red') +\" darken-0\"}>\n                        <div className=\"card-content white-text\">\n                            <span className=\"card-title\">{x.defender_king}</span>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col s12 m12\">\n                    {x.note!==''?<div className=\"card-panel teal lighten-2\">{x.note}</div>:''}\n                </div>\n            </div>\n        )\n        })\n        return(\n        <div>\n            {obj}\n        </div>\n        )\n    }\n}\n\n","import React, { Component } from 'react'\n\nexport default class filterBattles extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            king:\"\",\n            location:\"\",\n            type:\"\"\n        }\n    }\n    sendStates = (e) =>{\n        e.preventDefault()\n        this.props.onSubmit(this.state)\n    }\n    render() {\n        return (\n            <div className=\"row\">\n            <div className=\"col s12\">\n              <div className=\"row\">\n                <h5>Filter Results By:</h5>\n                <div className=\"input-field col s3\">\n                  <input type=\"text\" value={this.state.king} id=\"king\" onChange={(e)=>{this.setState({king:e.target.value})}} className=\"autocomplete\"/>\n                  <label htmlFor=\"autocomplete-input\">King</label>\n                </div>\n                <div className=\"input-field col s3\">\n                  <input type=\"text\" value={this.state.location} id=\"location\" onChange={(e)=>{this.setState({location:e.target.value})}} className=\"autocomplete\"/>\n                  <label htmlFor=\"autocomplete-input\">Location</label>\n                </div>\n                <div className=\"input-field col s3\">\n                  <input type=\"text\" value={this.state.type} id=\"type\" onChange={(e)=>{this.setState({type:e.target.value})}} className=\"autocomplete\"/>\n                  <label htmlFor=\"autocomplete-input\">Type of Battle</label>\n                </div>\n                <div className=\"input-field col s3\">\n                <button onClick={this.sendStates} className=\"btn waves-effect waves-light\" type=\"submit\" name=\"action\">Find Battles\n                </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        )\n    }\n}\n","import React from 'react'\n\nexport default function battleCount(props) {\n    return (\n        <div className=\"col s6\">\n            <h3>Total Battles Fought: {props.battlesCount}</h3>\n        </div>\n    )\n}\n","import React from 'react';\nimport axios from 'axios';\nimport Header from './components/header';\nimport Footer from './components/footer';\nimport BattleDetails from './components/battledetails';\nimport FilterBattles from './components/filterBattles';\nimport BattlesCount from './components/battleCount';\n\nimport './App.css';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      battles:[],\n      battlesCount:0\n    }\n  }\n  componentDidMount(){\n    axios.get('/list').then((res)=>this.setState({battles:res.data}))\n    .catch((err)=>console.error(err))\n    axios.get('/count').then((res)=>this.setState({battlesCount:res.data.battlesCount}))\n    .catch((err)=>console.error(err))\n  }\n  submitHandler = (searchParams) =>{\n    var query = {}\n    if(searchParams.king!==\"\"){\n      query.king = searchParams.king.trim()\n    }\n    if(searchParams.location!==\"\"){\n      query.location = searchParams.location.trim()\n    }\n    if(searchParams.type!==\"\"){\n      query.type = searchParams.type.trim()\n    }\n    axios.get('/search',{\n      params:query}).then(res=>this.setState({battles:res.data}))\n    .catch(err=>console.error(err))\n  }\n  render(){\n    return(\n      <div className=\"App\">\n        <Header/>\n        <BattlesCount battlesCount={this.state.battlesCount}/>\n        <FilterBattles onSubmit={this.submitHandler}/>\n        <BattleDetails battless={this.state.battles}/>\n        <Footer/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}